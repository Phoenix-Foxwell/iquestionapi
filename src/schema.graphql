# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  token: String!
  id: Int!
  name: String
  email: String!
  password: String!
  contact: String
  companyId: Int
  address: String
  profession: String
  role: Role!
  status: Status!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

enum Role {
  ADMIN
  USER
  COMPANY
}

enum Status {
  ACTIVE
  INACTIVE
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Principle {
  id: Int!
  name: String!
  description: String!
  status: Status!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  question_bank: [QuestionBank!]!
}

type QuestionAns {
  answer: String!
  mark: Int!
  rec: String!
}

type QuestionBank {
  id: Int!
  questionType: QuestionType!
  questionPlan: LicenseType!
  status: Status!
  question: String!
  description: String
  answer: [QuestionAns!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  principle: Principle!
}

enum QuestionType {
  MCQ
  SLIDER
  TANDF
  PERCENTAGE
}

enum LicenseType {
  FREE
  BUSINESS
  PREMIUM
  PLATINUM
}

type User {
  id: Int!
  name: String
  email: String
  contact: String
  address: String
  profession: String
  role: Role!
  status: Status!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type Company {
  id: Int!
  name: String
  logo: String
  website: String
  email: String
  ctoContact: String
  description: String
  address: String
  role: Role!
  status: Status!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type Project {
  id: Int!
  name: String!
  description: String!
  status: Status!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type License {
  id: Int!
  licenseType: LicenseType!
  paymentAmount: Int!
  discountAmount: String!
  questionAllowed: Int!
  projectPerLicense: Int
  discountValidTill: DateTime
  status: Status!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type Results {
  id: Int!
  userId: Int!
  projectId: Int!
  licenseId: Int!
  attemptNo: Int!
  totalScore: Int!
  resultStatus: Result!
  certified: Status!
  certificatedId: Int!
  certificatePrivacy: Status!
  adminComments: String
  status: Status!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  user: User!
  license: License!
  project: Project!
}

enum Result {
  MET
  NOTMET
  REVIEW
}

type SavedAns {
  question: String!
  answer: String!
  mark: Int!
  rec: String!
  status: Boolean!
  updatedAt: DateTime!
}

type Answer {
  id: Int!
  assesmentId: Int!
  answer: [SavedAns!]
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  assesment: Results!
}

type Compliance {
  id: Int!
  name: String!
  description: String!
  LearnMoreLink: String!
  status: Status!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type Licenseslave {
  id: Int!
  licenseTypeId: Int!
  userId: Int!
  paymentStatus: Status!
  licenseValidity: DateTime!
  paymentReference: String!
  paymentAmount: Int!
  status: Status!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  user: User!
  licenseType: License!
}

type Query {
  index: String!
  signin(loginUserInput: LoginUserInput!): Auth!
  signout: String!
  getdata: String!
  getAllQuestion: [QuestionBank!]!
  getAllQuestionById(id: Int!): QuestionBank!
  getPrinciple: [Principle!]!
  getPrincipleById(id: Int!): Principle!
  getAllUser: [User!]!
  getUserById(id: Int!): User!
  getAllCompany: [Company!]!
  getCompanyById(id: Int!): Company!
  getAllProject: [Project!]!
  getAllProjectById(id: Int!): Project!
  getAllLicense: [License!]!
  getAllLicenseById(id: Int!): License!
  getAllAnswers: [Answer!]!
  getAllResults: [Results!]!
  getAllCompliances: [Compliance!]!
  getAllCompliancesById(id: Int!): Compliance!
  getAllLicenseslave: [Licenseslave!]!
  getAllLicenseslaveById(id: Int!): Licenseslave!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Mutation {
  signup(signUpUserInput: SignUpUserInput!): Auth!
  updateQuestionById(updateQuestionbankInput: UpdateQuestionbankInput!): QuestionBank!
  updatePrincipleById(updatePrincipleInput: UpdatePrincipleInput!): Principle!
  updateUserById(updateUserInput: UpdateUserInput!): User!
  updateCompanyById(updateCompanyInput: UpdateCompanyInput!): Company!
  updateProjectById(updateProjectInput: UpdateProjectInput!): Project!
  updateLicenseById(updateLicenseInput: UpdateLicenseInput!): License!
  createResults(createAnswerInput: CreateAnswerInput!, createResultInput: CreateResultInput!): Results!
  updateResults(updateAnswerInput: UpdateAnswerInput!, updateResultInput: UpdateResultInput!): Results!
  updateComplianceById(updateComplianceInput: UpdateComplianceInput!): Compliance!
  updateLicenseslaveById(updateLicenseslaveInput: UpdateLicenseslaveInput!): Licenseslave!
}

input SignUpUserInput {
  email: String!
  password: String!
}

input UpdateQuestionbankInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
  questionType: QuestionType
  questionPlan: LicenseType
  status: Status
  question: String
  description: String
  answer: [QuestionAnswer!]
}

input QuestionAnswer {
  answer: String!
  mark: Int!
  rec: String!
}

input UpdatePrincipleInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
  name: String
  description: String
  status: Status
}

input UpdateUserInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
  name: String
  email: String
  contact: String
  address: String
  profession: String
  role: Role
  status: Status
}

input UpdateCompanyInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
  name: String
  logo: String
  website: String
  email: String
  ctoContact: String
  description: String
  address: String
  role: Role
  status: Status
}

input UpdateProjectInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
  name: String
  description: String
  status: Status
}

input UpdateLicenseInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
  licenseType: LicenseType
  paymentAmount: Int
  discountAmount: String
  questionAllowed: Int
  projectPerLicense: Int
  discountValidTill: DateTime
  status: Status
}

input CreateAnswerInput {
  answers: [SavedAnswer!]!
}

input SavedAnswer {
  questionId: Int
  question: String
  answer: String
  mark: Int
  rec: String
  status: Boolean
  updatedAt: DateTime
}

input CreateResultInput {
  userId: Int
  projectId: Int
  licenseId: Int
  assesementId: Int
  totalScore: Int
  resultStatus: Result
  certified: Status
  certificatedId: Int
  certificatePrivacy: Status
  status: Status
}

input UpdateAnswerInput {
  answers: [SavedAnswer!]
}

input UpdateResultInput {
  userId: Int
  projectId: Int
  licenseId: Int
  assesementId: Int
  totalScore: Int
  resultStatus: Result
  certified: Status
  certificatedId: Int
  certificatePrivacy: Status
  status: Status
  id: Int
}

input UpdateComplianceInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
  name: String
  description: String
  LearnMoreLink: String
  status: Status
}

input UpdateLicenseslaveInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
  licenseTypeId: Int
  userId: Int
  paymentStatus: Status
  licenseValidity: DateTime
  paymentReference: String
  paymentAmount: Int
  status: Status
}